<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CreateAllTables" xml:space="preserve">
    <value>-- The database may contain decks with the same name and description; ID keeps them apart.

CREATE TABLE IF NOT EXISTS "decks" (
	"sort_id" INTEGER PRIMARY KEY AUTOINCREMENT,
	"id"	BLOB NOT NULL UNIQUE,
	"name"	TEXT NOT NULL,
	"description"	TEXT NOT NULL
);

-- All fields (used by facts) in a deck must have unique names,
-- but different decks may each contain a field with the same name.

CREATE TABLE IF NOT EXISTS "fields" (
	"sort_id" INTEGER PRIMARY KEY AUTOINCREMENT,
	"deck_id"	BLOB NOT NULL,
	"name"	TEXT NOT NULL,
	"allow_html"	INTEGER NOT NULL,
	FOREIGN KEY("deck_id") REFERENCES "decks"("id"),
	UNIQUE("deck_id","name")
);

-- Facts are universally unique and not shared with other decks.

CREATE TABLE IF NOT EXISTS "facts" (
	"sort_id" INTEGER PRIMARY KEY AUTOINCREMENT,
	"deck_id"	BLOB NOT NULL,
	"id"	BLOB NOT NULL UNIQUE,
	FOREIGN KEY("deck_id") REFERENCES "decks"("id"),
	UNIQUE("deck_id","id")
);

-- A specific fact will for a specific field have only one piece of content.

CREATE TABLE IF NOT EXISTS "facts_contents" (
	"sort_id" INTEGER PRIMARY KEY AUTOINCREMENT,
	"fact_id"	BLOB NOT NULL,
	"deck_id"	BLOB NOT NULL,
	"field_name"	TEXT NOT NULL,
	"content"	TEXT NOT NULL,
	FOREIGN KEY("fact_id") REFERENCES "facts"("id"),
	FOREIGN KEY("deck_id","field_name") REFERENCES "fields"("deck_id","name"),
	UNIQUE("fact_id","deck_id","field_name")
);

-- Cardtypes are universally unique and not shared with other decks.

CREATE TABLE IF NOT EXISTS "cardtypes" (
	"sort_id" INTEGER PRIMARY KEY AUTOINCREMENT,
	"deck_id"	BLOB NOT NULL,
	"id"	BLOB NOT NULL UNIQUE,
	"name"	TEXT NOT NULL,
	"question_template"	TEXT NOT NULL,
	"answer_template"	TEXT NOT NULL,
	"styling"	TEXT NOT NULL,
	"initial_probability"	REAL NOT NULL,
	"transition_probability"	REAL NOT NULL,
	"slipping_probability"	REAL NOT NULL,
	"lucky_guess_probability"	REAL NOT NULL,
	"mastery_threshold"	REAL NOT NULL,
	"competency_threshold"	REAL NOT NULL,
	"cards_are_composable"	INTEGER NOT NULL,
	FOREIGN KEY("deck_id") REFERENCES "decks"("id"),
	UNIQUE("deck_id","id")
);

-- Resources are universally unique and not shared with other decks.

CREATE TABLE IF NOT EXISTS "resources" (
	"id"	BLOB NOT NULL UNIQUE,
	"path"	TEXT NOT NULL,
	"original_path"	TEXT NOT NULL,
	"deck_id"	BLOB NOT NULL,
	FOREIGN KEY("deck_id") REFERENCES "decks"("id"),
	UNIQUE("deck_id","id")
);

-- The mastery record is unique for a combination of cardtype and fact.

CREATE TABLE IF NOT EXISTS "mastery_records" (
	"sort_id" INTEGER PRIMARY KEY AUTOINCREMENT,
	"cardtype_id"	BLOB NOT NULL,
	"fact_id"	BLOB NOT NULL,
	"mastery"	REAL NOT NULL,
	FOREIGN KEY("cardtype_id") REFERENCES "cardtypes"("id"),
	FOREIGN KEY("fact_id") REFERENCES "facts"("id"),
	UNIQUE("cardtype_id","fact_id")
);</value>
  </data>
  <data name="DropAllTables" xml:space="preserve">
    <value>DROP TABLE IF EXISTS mastery_records;
DROP TABLE IF EXISTS resources;
DROP TABLE IF EXISTS cardtypes;
DROP TABLE IF EXISTS facts_contents;
DROP TABLE IF EXISTS facts;
DROP TABLE IF EXISTS fields;
DROP TABLE IF EXISTS decks;</value>
  </data>
</root>